name: "Verify: {Service Name}"

on:    # Job gets executed when there is a new commit on main or if there is a pull request to main
  push:
    branches: 
      - main
    tags-ignore:
      - '**'
    paths:
      - "{Service Name}/**"
  pull_request:
    branches:
      - main
    paths:
      - "{Service Name}/**"

env:
  JFROG_CLI_LOG_LEVEL: DEBUG
  JFROG_SERVER: {Artifactory Server Name} # The Artifactory Server Name.
  WORKING_DIRECTORY: {Service Name} # If there is a mono repo structure then this flag helps to target the service folder.
      
jobs:
  verify-and-test:
    runs-on: [self-hosted, worker-regular] # Specifies the machine that the job will run on. It can be GitHub-hosted.

    steps:
    - name: Checkout Repository # Checkout Repository.
      uses: actions/checkout@v4

    - name: Setup JFrog CLI # Sets up JFrog Artifactory.
      uses: jfrog/setup-jfrog-cli@v4
      env:
          JF_ENV_1: ${{ secrets.JF_SECRET_ENV_MAGPIE }}  # The secrets contain the authentication details to the Artifactory Server.

    - name: Show JFrog Config # Shows the Jfrog Artifactory config in use.
      shell: bash
      run: jf config show

    - name: Setup Pip Config # Setup Pip config
      shell: bash
      run: jf pip-config --server-id-resolve $JFROG_SERVER --repo-resolve {Repo_Name}

    - name: Setup Python #Setup Pyhon
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Dependencies
      shell: bash
      run: |
        pip install --upgrade pip
        pip install --verbose -r requirements.txt

    - name: Run Unit Tests
      shell: bash
      run: |
        pytest --junitxml=test-results.xml

    - name: Test Summary
      uses: pmeier/pytest-results-action@v0.6.0
      with:
        path: test-results.xml
        summary: true
