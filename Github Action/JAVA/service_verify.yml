name: "Verify: {Service Name}"

on:    # Job gets executed when there is a new commit on main or if there is a pull request to main
  push:
    branches: 
      - main
    tags-ignore:
      - '**'
    paths:
      - "{Service Name}/**"
  pull_request:
    branches:
      - main
    paths:
      - "{Service Name}/**"

env:
  JFROG_CLI_LOG_LEVEL: DEBUG
  JFROG_SERVER: {Artifactory Server Name} # The Artifactory Server Name.
  WORKING_DIRECTORY: {Service Name} # If there is a mono repo structure then this flag helps to target the service folder.

jobs:
  verify-and-test:
    runs-on: [self-hosted, worker-regular] # Specifies the machine that the job will run on. It can be GitHub-hosted.

    steps:
    - name: Checkout Repository # Checkout Repository.
      uses: actions/checkout@v4

    - name: Setup JFrog CLI # Sets up JFrog Artifactory.
      uses: jfrog/setup-jfrog-cli@v4
      env:
          JF_ENV_1: ${{ secrets.JF_SECRET_ENV_MAGPIE }} # The secrets contain the authentication details to the Artifactory Server.


    - name: Show JFrog Config # Shows the Jfrog Artifactory config in use.
      shell: bash
      run: jf config show

    - name: Setup Maven Config # Sets up Maven Config
      run: jf mvn-config --repo-resolve-releases {local}-maven --repo-resolve-snapshots {local}-maven --server-id-resolve $JFROG_SERVER #{local} here refers to the org's inhouse artifacts which the current service can utilize

    - name: Set Up JDK 8  # Sets Up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'corretto'
        cache: maven

    - name: Setup Maven Tool # Sets up Maven.
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: '3.9.5'

    - name: Setup Python # Sets up Python.It is required for setting up test reports.
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Build With Maven # Build the service
      shell: bash
      run: |
        jf mvn --batch-mode --show-version \
          clean verify
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Archive Test Results # The test results are uploaded as an artifact. It can be viewed after the job is executed.
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: '**/target/**/TEST-*.xml'

    - name: Archive Test Coverage # The code coverage results are uploaded as an artifact. It can be viewed after the job is executed.
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage
        path: '**/target/**/jacoco.xml'

    - name: Publish Test Report # The reports are published at the end of the run logs.
      uses: mikepenz/action-junit-report@v4
      with:
        report_paths: '**/target/**/TEST-*.xml'
        require_tests: true
        include_passed: true
        detailed_summary: true

    - name: Find Coverage Reports # Improves the readability of the report
      id: list-coverage-reports
      shell: bash
      run: python3 -c 'from glob import *; print("paths=" + ",".join(glob("**/jacoco.xml",recursive=True)))' >> $GITHUB_OUTPUT

    - name: Add Coverage To PR # Attaches the coverage and other test reports to the PR
      id: jacoco
      uses: madrapps/jacoco-report@v1.6.1
      with:
        paths: ${{ steps.list-coverage-reports.outputs.paths }}
        token: ${{ secrets.GITHUB_TOKEN }}
